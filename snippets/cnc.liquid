<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>cnc â€” Stock Check</title>
<style>
  :root{--cnc-green:#10b981;--cnc-green-d:#0ea171;--cnc-red:#ef4444;--cnc-gray:#e5e7eb;--cnc-text:#0f172a;--cnc-sub:#475569}
  body{font-family:system-ui,Segoe UI,Inter,Roboto,Helvetica,Arial,sans-serif;background:#f9fafb;color:var(--cnc-text);padding:24px}
  .cnc-stockcheck{max-width:680px;border:1px solid var(--cnc-green);border-radius:16px;padding:14px;background:#fff;margin:auto}
  .cnc-header{display:flex;justify-content:center}
  .cnc-close{display:flex;align-items:center;gap:8px;border:1px solid var(--cnc-green);color:var(--cnc-green);background:#fff;border-radius:999px;padding:10px 18px;font-weight:700;cursor:pointer}
  .cnc-close:hover{background:#f6fffb}
  .cnc-close-icon{font-size:16px}
  .cnc-search{display:flex;gap:8px;margin:14px 8px}
  .cnc-input{flex:1;border:1px solid #d1d5db;border-radius:6px;padding:10px 12px;font-size:14px}
  .cnc-search-btn{width:44px;display:grid;place-items:center;border:none;background:var(--cnc-green);color:#fff;border-radius:6px;cursor:pointer}
  .cnc-search-btn:hover{background:var(--cnc-green-d)}

  .cnc-results{margin:4px 6px 8px}
  .cnc-item{padding:12px 8px;border-top:1px solid var(--cnc-gray)}
  .cnc-row{display:flex;align-items:center;gap:10px;cursor:pointer}
  .cnc-radio{appearance:none;-webkit-appearance:none;inline-size:18px;block-size:18px;border:2px solid #cbd5e1;border-radius:999px;display:inline-grid;place-items:center;cursor:pointer}
  .cnc-radio:checked{border-color:var(--cnc-green)}
  .cnc-radio:checked::after{content:""; inline-size:10px; block-size:10px; background:var(--cnc-green); border-radius:999px}
  .cnc-name{font-weight:700}
  .cnc-distance{margin-left:6px;color:var(--cnc-sub);font-weight:600;font-size:13px;white-space:nowrap}
  .cnc-badge{margin-left:auto;font-size:13px;font-weight:700;display:flex;align-items:center;gap:6px}
  .cnc-badge.cnc-in{color:var(--cnc-green)}
  .cnc-badge.cnc-out{color:var(--cnc-red)}
  .cnc-caret{margin-left:8px;transition:transform .18s ease}
  .cnc-detail{margin-left:30px;margin-top:8px;color:#111;font-size:14px;display:none;line-height:1.45}
  .cnc-item.cnc-open .cnc-detail{display:block}
  .cnc-item.cnc-open .cnc-caret{transform:rotate(180deg)}
  .cnc-loader,.cnc-empty,.cnc-error{padding:10px 8px;font-size:14px}
  .cnc-error{color:var(--cnc-red);font-weight:700}
</style>
</head>
<body>

<div class="cnc-stockcheck" id="cnc-stockcheck">
  <div class="cnc-header">
    <button class="cnc-close" type="button" id="cnc-toggle-btn">
      <span class="cnc-close-icon">
        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 616 512"><path fill="currentColor" d="M602 118.6L537.1 15C531.3 5.7 521 0 510 0H106C95 0 84.7 5.7 78.9 15L14 118.6c-29.6 47.2-10 110.6 38 130.8v227.4c0 19.4 14.3 35.2 32 35.2h448c17.7 0 32-15.8 32-35.2V249.4c48-20.2 67.6-83.6 38-130.8zM516 464H100v-96h416zm-.2-144.2H100v-64.7c24-3.3 45.1-15.2 60.3-32.2 18 20.1 44.3 33.1 73.8 33.1 29.6 0 55.8-13 73.8-33.1 18 20.1 44.3 33.1 73.8 33.1 29.6 0 55.8-13 73.8-33.1 15.3 17 36.3 28.9 60.3 32.2zm47.9-133c-3.2 6.8-10.9 18.6-27 20.8-2.4.3-4.8.5-7.2.5-14.7 0-28.2-6.1-38.1-17.2L455.7 151 420 190.8c-9.9 11.1-23.5 17.2-38.1 17.2s-28.2-6.1-38.1-17.2L308 151l-35.7 39.8c-9.9 11.1-23.5 17.2-38.1 17.2-14.7 0-28.2-6.1-38.1-17.2L160.3 151l-35.7 39.8c-9.9 11.1-23.5 17.2-38.1 17.2-2.5 0-4.9-.2-7.2-.5-16-2.2-23.8-13.9-27-20.8-5-10.8-7.1-27.6 2.3-42.6L114.8 48h386.3l60.2 96.1c9.5 15.1 7.5 31.9 2.4 42.7z"></path></svg>
      </span>
      <span>Check Stock in Store</span>
    </button>
  </div>

  <div class="cnc-search" id="cnc-search-box">
    <input id="cnc-postcode" class="cnc-input" type="text" placeholder="Enter Postcode" />
    <button id="cnc-search-btn" class="cnc-search-btn" aria-label="Search">
      <svg viewBox="0 0 24 24" width="18" height="18"><path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 10-1.06 1.06l.27.28h.79l5 5 1.5-1.5-5-5zM10 15.5A5.5 5.5 0 1010 4a5.5 5.5 0 000 11.5z" fill="currentColor"/></svg>
    </button>
  </div>

  <div id="cnc-results" class="cnc-results" aria-live="polite"></div>
</div>

<script>
(function(){
  /* ===== config ===== */
  const API_BASE = "https://rows-driver-upgrading-steady.trycloudflare.com";
  const PICKUP_ENDPOINT = API_BASE + "/api/pickup";
  const RADIUS_KM = 100;
  const VARIANT_ID = "46578436571392";

  /* ===== polyfills / helpers ===== */
  if (!window.CSS) window.CSS = {};
  if (!CSS.escape) {
    CSS.escape = function (sel) {
      return String(sel).replace(/([ #;?%&,.+*~':"!^$[\]()=>|\/@])/g,'\\$1');
    };
  }
  function safeGet(obj, path, fallback){
    try{
      return path.split('.').reduce((o,k)=> (o && (k in o)) ? o[k] : undefined, obj) ?? fallback;
    }catch{return fallback;}
  }
  function escapeHtml(s){return String(s||'').replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));}
  function badge(status){
    const ok = /instock|in_stock/i.test(String(status||'')); // tweak if your API uses a different flag
    return `<span class="cnc-badge ${ok?'cnc-in':'cnc-out'}">${ok?'âœ” In stock':'âœ– Out of stock'}</span>`;
  }
  function address(a){
    if(!a) return '';
    const parts = [
      a.address1, a.address2,
      [a.city,a.province].filter(Boolean).join(', '),
      [a.country,a.zip].filter(Boolean).join(' - ')
    ].filter(Boolean);
    return parts.join('<br>');
  }
  function deriveZipFromSaved(sel){
    if (!sel) return '';
    const rawZip = safeGet(sel,'raw.address.zip','') || safeGet(sel,'address.zip','');
    if (rawZip) return String(rawZip);
    const flat = Array.isArray(safeGet(sel,'address.formatted',[])) ? sel.address.formatted.join(' ') : (safeGet(sel,'address.formatted','') || '');
    const m = String(flat).match(/\b\d{4,6}\b/);
    return m ? m[0] : '';
  }

  /* ===== dom ===== */
  const toggleBtn     = document.getElementById('cnc-toggle-btn');
  const searchBox     = document.getElementById('cnc-search-box');
  const postcodeInput = document.getElementById('cnc-postcode');
  const searchBtn     = document.getElementById('cnc-search-btn');
  const resultsBox    = document.getElementById('cnc-results');

  /* ===== saved selection ===== */
  const SAVED_KEY = 'pickup.selectedLocation';
  let savedSelection = null;
  try { savedSelection = JSON.parse(localStorage.getItem(SAVED_KEY) || 'null'); } catch(e) { savedSelection = null; }

  /* ===== persistence ===== */
  function persistSelection(location){
    try {
      // Store a compact, stable shape (keep full object if you prefer)
      const payload = {
        id: location.locationId || location.id || null,
        name: location.name,
        distanceKm: location.distanceKm,
        status: location.status,
        address: location.address,
        raw: location.raw ?? null
      };
      localStorage.setItem(SAVED_KEY, JSON.stringify(payload));
    } catch (e) {
      console.warn('Failed to save selection', e);
    }
  }

  /* ===== templating ===== */
  const rowTpl = (loc, idx)=>`
    <div class="cnc-item" data-idx="${idx}" data-id="${escapeHtml(loc.locationId || loc.id || '')}">
      <div class="cnc-row" data-toggle>
        <input class="cnc-radio" type="radio" name="cnc-pickup" aria-label="Select ${escapeHtml(loc.name)}" />
        <div class="cnc-name">${escapeHtml(loc.name||'Unknown')}</div>
        <div class="cnc-distance">${Number(loc.distanceKm||0).toFixed(2)} km</div>
        ${badge(loc.status)}
        <svg class="cnc-caret" width="16" height="16" viewBox="0 0 24 24" aria-hidden="true"><path d="M7 10l5 5 5-5z" fill="#94a3b8"/></svg>
      </div>
      <div class="cnc-detail">${address(loc.address)}</div>
    </div>
  `;

  function emitSelected(location){
    // ðŸ”¥ Save to localStorage whenever a selection happens (default, preferred, or manual)
    persistSelection(location);
    try {
      window.dispatchEvent(new CustomEvent('cnc:pickupSelected', { detail: { location } }));
    } catch(e){ console.warn('emitSelected failed', e); }
  }

  function renderResults(payload, preferredId){
    const inR  = Array.isArray(payload?.inRadius) ? payload.inRadius : [];
    const outR = Array.isArray(payload?.outOfRadius) ? payload.outOfRadius : [];
    let list = inR.length ? inR : [...inR, ...outR]; // only fall back if no inRadius
    if(!list.length){
      resultsBox.innerHTML = `<div class="cnc-empty">No nearby stores found.</div>`;
      return;
    }
    resultsBox.innerHTML = list.map(rowTpl).join('');
    const items = Array.from(resultsBox.querySelectorAll('.cnc-item'));

    items.forEach((item, i)=>{
      const radio  = item.querySelector('.cnc-radio');
      const header = item.querySelector('[data-toggle]');
      const selectThis = ()=>{
        resultsBox.querySelectorAll('.cnc-radio').forEach(r=>r.checked=false);
        resultsBox.querySelectorAll('.cnc-item').forEach(el=>el.classList.remove('cnc-open'));
        radio.checked = true;
        item.classList.add('cnc-open');
        emitSelected(list[i]); // <-- also persists
      };
      header.addEventListener('click', e=>{ if(e.target!==radio) selectThis(); });
      radio.addEventListener('change', ()=>{ if(radio.checked) selectThis(); });
    });

    // Prefer saved location
    let selected = null;
    if (preferredId){
      const idSel = `.cnc-item[data-id="${CSS.escape(preferredId)}"]`;
      const matchEl = resultsBox.querySelector(idSel);
      if (matchEl){
        const r = matchEl.querySelector('.cnc-radio');
        if (r) r.checked = true;
        matchEl.classList.add('cnc-open');
        selected = list[Number(matchEl.getAttribute('data-idx'))];
      }
    }
    // Fallback (first item)
    if(!selected){
      const firstItem  = resultsBox.querySelector('.cnc-item');
      const firstRadio = resultsBox.querySelector('.cnc-radio');
      if(firstItem && firstRadio){
        firstRadio.checked = true;
        firstItem.classList.add('cnc-open');
        selected = list[0];
      }
    }
    if (selected) emitSelected(selected); // <-- persists default/preferred too
  }

  async function search(postcode, preferredId){
    if(!postcode){ resultsBox.innerHTML = `<div class="cnc-error">Please enter a postcode.</div>`; return; }
    resultsBox.innerHTML = `<div class="cnc-loader">Checking stockâ€¦</div>`;
    try{
      const res = await fetch(PICKUP_ENDPOINT, {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        mode:'cors',
        body: JSON.stringify({
          pincode: String(postcode||'').trim(),
          variantId: VARIANT_ID,
          radiusKm: RADIUS_KM
        })
      });
      if(!res.ok) throw new Error('Network error: ' + res.status);
      const data = await res.json();
      renderResults(data, preferredId);
    }catch(e){
      console.error('Pickup API error:', e);
      resultsBox.innerHTML = `<div class="cnc-error">Unable to fetch stock. Check API URL / CORS / HTTPS, then try again.</div>`;
    }
  }

  /* ===== toggle (still available) ===== */
  let visible = true; // open by default
  toggleBtn.addEventListener('click', ()=>{
    visible = !visible;
    searchBox.style.display = visible ? 'flex' : 'none';
    if (!visible) resultsBox.innerHTML = '';
  });

  /* ===== boot: open by default, auto-fill from saved selection ===== */
  document.addEventListener('DOMContentLoaded', async ()=>{
    searchBox.style.display = 'flex';
    resultsBox.innerHTML = '';

    const preferredId = safeGet(savedSelection,'id',null) || safeGet(savedSelection,'raw.locationId',null);
    const zip = deriveZipFromSaved(savedSelection);
    if (zip) {
      postcodeInput.value = zip;
      await search(zip, preferredId);
    } else {
      postcodeInput.focus();
    }
  });

  /* ===== manual search ===== */
  searchBtn.addEventListener('click', ()=> search(postcodeInput.value, null));
  postcodeInput.addEventListener('keydown', e=>{ if(e.key==='Enter') search(postcodeInput.value, null); });
})();
</script>


</body>
</html>
