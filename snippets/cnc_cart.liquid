<script>
/* ======== CONFIG ======== */
const PICKUP_API          = "https://rows-driver-upgrading-steady.trycloudflare.com/api/pickup";
let   VARIANT_ID          = null;                  // set to a variant id string to lock validation to that variant
const PICKUP_META_VARIANT = "46950237503744";     // hidden meta line to carry pickup info

// Resolve the shop domain safely (Shopify storefronts expose window.Shopify.shop)
const MY_SHOP_DOMAIN =
  (window.Shopify && window.Shopify.shop) ||
  (typeof __st !== 'undefined' && __st && __st.slug) ||
  "clickandcollect1234.myshopify.com";

/* ======== STORAGE KEYS ======== */
const SAVED_LOC_KEY = 'pickup.selectedLocation';
const SAVED_PC_KEY  = 'pickup.lastPostcode';

/* ======== DOM ======== */
const deliveryMethods = document.querySelectorAll('.delivery-method');
const postcodeInput   = document.getElementById('postcode-input');
const searchButton    = document.getElementById('search-button');
const locationSection = document.getElementById('location-section');
const locationsList   = document.getElementById('locations-list');
const loading         = document.getElementById('loading');
const checkoutButton  = document.getElementById('checkout');
const qtyErrorEl      = document.getElementById('qty-error');

/* ======== STATE ======== */
let selectedMethod   = 'collect';
let selectedLocation = null;
let customerCoords   = null;

/* ======== UTILS ======== */
const escapeHTML = s => String(s||'').replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));
function formatAddress(a){
  const line1=[a?.address1,a?.address2].filter(Boolean).join(', ');
  const line2=[a?.city,a?.province].filter(Boolean).join(', ');
  const line3=[a?.country,a?.zip].filter(Boolean).join(' - ');
  return [line1,line2,line3].filter(Boolean);
}
function calculateDistance(lat1, lon1, lat2, lon2){
  if ([lat1, lon1, lat2, lon2].some(v=>v==null)) return null;
  const R=6371, dLat=(lat2-lat1)*Math.PI/180, dLon=(lon2-lon1)*Math.PI/180;
  const a=Math.sin(dLat/2)**2+Math.cos(lat1*Math.PI/180)*Math.cos(lat2*Math.PI/180)*Math.sin(dLon/2)**2;
  return +(2*R*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))).toFixed(2);
}
function setCheckoutEnabled(on){ checkoutButton.classList.toggle('disabled',!on); checkoutButton.disabled=!on; }
function showLoading(on){ loading.classList.toggle('hidden',!on); }
function showQtyError(msg){
  qtyErrorEl.textContent = msg || "";
  qtyErrorEl.classList.toggle('hidden', !msg);
}

/* ======== STORAGE ======== */
function persistSelection(location){
  try{
    const payload = {
      id: location.id || location.raw?.locationId || null,
      name: location.name,
      available: Number(location.available ?? 0),
      address: location.address,
      raw: location.raw ?? null
    };
    localStorage.setItem(SAVED_LOC_KEY, JSON.stringify(payload));
  }catch(e){ console.warn('persistSelection failed', e); }
}
function readSavedSelection(){
  try{ return JSON.parse(localStorage.getItem(SAVED_LOC_KEY) || 'null'); }
  catch{ return null; }
}
function persistPostcode(pc){
  try{ localStorage.setItem(SAVED_PC_KEY, String(pc||'')); }catch{}
}
function readSavedPostcode(){
  try{ return localStorage.getItem(SAVED_PC_KEY) || ''; }catch{ return ''; }
}

/* ======== CART HELPERS ======== */
async function removePickupMeta(){
  try{
    const cart=await fetch('/cart.js',{credentials:'same-origin'}).then(r=>r.json());
    const updates={};
    (cart.items||[]).forEach(i=>{ if(String(i.variant_id)===PICKUP_META_VARIANT) updates[i.key]=0; });
    if(Object.keys(updates).length){
      await fetch('/cart/update.js',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',body:JSON.stringify({updates})});
    }
  }catch(e){ console.error('[pickup] remove error',e); }
}

async function getLiveCart(){
  try{
    const res = await fetch('/cart.js', { credentials:'same-origin', cache:'no-store' });
    return await res.json();
  }catch(e){
    console.error('getLiveCart error', e);
    return { items: [] };
  }
}

// choose which variant to validate: configured id or first non-meta line
async function getTargetVariantId(){
  if (VARIANT_ID) return String(VARIANT_ID);
  const cart = await getLiveCart();
  const line = (cart.items || []).find(i => String(i.variant_id) !== String(PICKUP_META_VARIANT));
  return line ? String(line.variant_id) : null;
}

function qtyForVariant(cart, variantId){
  let q = 0;
  (cart.items || []).forEach(i => { if (String(i.variant_id) === String(variantId)) q += Number(i.quantity || 0); });
  return q;
}

let addingPickupMeta=false;
async function addOrUpdatePickupMeta(location){
  if(addingPickupMeta) return;
  addingPickupMeta=true;
  try{
    const cart=await fetch('/cart.js',{credentials:'same-origin'}).then(r=>r.json());
    let existing=null;
    (cart.items||[]).forEach(i=>{ if(String(i.variant_id)===PICKUP_META_VARIANT) existing=i; });

    const props={
      'Pickup Location':location.name,
      'Location ID':location.id||location.raw?.locationId||'',
      'Address':(location.address?.formatted||[]).join(', '),
      'Available At Location': String(location.available ?? ''),
      '__pickup_meta':'true'
    };

    if(!existing){
      await fetch('/cart/add.js',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',
        body:JSON.stringify({id:PICKUP_META_VARIANT,quantity:1,properties:props})});
    }else{
      await fetch('/cart/change.js',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',
        body:JSON.stringify({id:existing.key,quantity:1,properties:props})});
    }
  }catch(e){ console.error('[pickup] add/update error',e); }
  finally{ addingPickupMeta=false; }
}

/* ======== GEO ======== */
function getCustomerLocation(){
  return new Promise(resolve=>{
    if(navigator.geolocation){
      navigator.geolocation.getCurrentPosition(
        pos=>resolve({latitude:pos.coords.latitude,longitude:pos.coords.longitude}),
        ()=>resolve({latitude:30.7333,longitude:76.7794})
      );
    }else resolve({latitude:30.7333,longitude:76.7794});
  });
}

/* ======== INIT ======== */
document.addEventListener('DOMContentLoaded', async ()=>{
  await removePickupMeta();
  const savedSel = readSavedSelection();
  const savedPC  = readSavedPostcode() || postcodeInput.value || '';
  if (savedPC) postcodeInput.value = savedPC;
  customerCoords=await getCustomerLocation();

  deliveryMethods.forEach(m=>{
    m.addEventListener('click', async ()=>{
      deliveryMethods.forEach(x=>x.classList.remove('active'));
      m.classList.add('active');
      selectedMethod=m.dataset.method;

      if(selectedMethod==='delivery'){
        await removePickupMeta();
        selectedLocation=null;
        setCheckoutEnabled(false);
        document.querySelectorAll('.location-item').forEach(el=>{
          el.classList.remove('selected','is-open');
          el.querySelector('.cnc-radio')?.checked && (el.querySelector('.cnc-radio').checked=false);
        });
        locationSection.classList.remove('active');
        showQtyError("");
      }else{
        locationSection.classList.add('active');
      }
    });
  });

  searchButton.addEventListener('click', onSearch);
  postcodeInput.addEventListener('keydown', e=>{ if(e.key==='Enter') onSearch(); });

  checkoutButton.addEventListener('click', onCheckoutClick);

  // auto-load using saved postcode
  locationSection.classList.add('active');
  if (savedPC) await loadPickup(savedPC, savedSel?.id || savedSel?.raw?.locationId || null);
});

window.addEventListener('pageshow', async ()=>{ await removePickupMeta(); });
document.addEventListener('visibilitychange', async ()=>{ if(document.visibilityState==='visible'){ await removePickupMeta(); }});

/* ======== CHECKOUT CLICK VALIDATION ======== */
async function onCheckoutClick(e){
  e.preventDefault();
  e.stopPropagation();

  if (selectedMethod !== 'collect'){
    // No pickup validation for home delivery
    showQtyError("");
    window.location.href='/checkout';
    return;
  }

  const row = document.querySelector('.location-item.selected');
  if (!row){
    showQtyError("Please choose a pickup location first.");
    setCheckoutEnabled(false);
    return;
  }

  // selected location values captured at render/select time
  const locName   = row.dataset.name || 'Selected location';
  const available = Number(row.dataset.available || 0);

  // get live cart & compute qty for the target variant
  const cart = await getLiveCart();
  const vid  = await getTargetVariantId();
  const qty  = vid ? qtyForVariant(cart, vid) : 0;

  if (qty > available){
    showQtyError(`Only ${available} available at "${locName}". You have ${qty} items in your cart. Please reduce the quantity or choose another location.`);
    setCheckoutEnabled(false);
    return; // block checkout
  }

  // all good â†’ proceed
  showQtyError("");
  setCheckoutEnabled(true);
  window.location.href='/checkout';
}

/* ======== SEARCH / RENDER ======== */
async function onSearch(){
  const postcode=postcodeInput.value.trim();
  if(!postcode){ alert('Please enter a postcode'); return; }
  if(selectedMethod!=='collect'){ alert('Switch to Click & Collect to search pickup locations.'); return; }
  persistPostcode(postcode);
  const savedSel = readSavedSelection();
  await loadPickup(postcode, (savedSel?.id || savedSel?.raw?.locationId || null));
}

/**
 * Integrated API call with:
 *  - myShopifyDomain (resolved from Shopify.shop or fallback)
 *  - pincode (from input)
 *  - variantId (from cart or configured)
 *  - radiusKm (100 default here; change as needed)
 */
async function loadPickup(pincode, preferredId=null){
  showLoading(true);
  setCheckoutEnabled(false);
  selectedLocation=null;
  showQtyError("");
  locationsList.innerHTML='';

  try{
    const variantId = await getTargetVariantId() || VARIANT_ID || '';

    // EXACT payload you asked to implement
    const payload = {
      myShopifyDomain: MY_SHOP_DOMAIN,
      pincode,
      variantId,
      radiusKm: 100
    };

    const res = await fetch(PICKUP_API, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
      redirect: "follow"
    });

    if(!res.ok) throw new Error(`Pickup API error: ${res.status}`);

    const data = await res.json();

    const list=[...(data.inRadius||[]),...(data.outOfRadius||[])].map(loc=>{
      const formatted=formatAddress(loc.address);
      const dist=typeof loc.distanceKm==='number'?loc.distanceKm:calculateDistance(
        customerCoords?.latitude,customerCoords?.longitude,
        loc.coordinates?.lat,loc.coordinates?.lng
      );
      const available = Number(
        loc.available ?? loc.onHand ?? loc.quantity ?? loc.stock ?? (loc.raw && loc.raw.available) ?? 0
      );
      return{
        id:loc.locationId||loc.id,
        name:loc.name,
        distance:dist,
        available,
        address:{formatted},
        raw:loc
      };
    });

    renderLocations(list, preferredId);
  }catch(err){
    console.error(err);
    locationsList.innerHTML=`<div class="error-message">Failed to load stock information. Please try again.</div>`;
  }finally{ showLoading(false); }
}

function renderLocations(list, preferredId=null){
  locationsList.innerHTML='';
  if(!list.length){
    locationsList.innerHTML='<div class="no-results">No locations found for the entered postcode.</div>';
    return;
  }
  list.sort((a,b)=> (a.distance??1e9)-(b.distance??1e9));
  list.forEach(loc=>locationsList.appendChild(locationRow(loc)));

  if (preferredId){
    const match = locationsList.querySelector(`.location-item[data-location-id="${CSS.escape(preferredId)}"]`);
    if (match){ match.querySelector('[data-select]')?.click(); return; }
  }
  const first = locationsList.querySelector('.location-item');
  if (first){ first.querySelector('[data-select]')?.click(); }
}

function locationRow(location){
  const div=document.createElement('div');
  const inStock=(location.available ?? 0) > 0;
  const distanceStr=location.distance!=null?`${location.distance} km`:''; 

  div.className='location-item';
  div.dataset.locationId=location.id;
  div.dataset.available = Number(location.available ?? 0); // used at checkout validation
  div.dataset.name = location.name;

  div.innerHTML=`
    <div class="cnc-row">
      <div class="cnc-left" data-select>
        <input class="cnc-radio" type="radio" name="pickup-radio" aria-label="Select ${escapeHTML(location.name)}" />
        <div class="cnc-name">${escapeHTML(location.name)}</div>
        <div class="cnc-distance">${escapeHTML(distanceStr)}</div>
        <div class="cnc-badge ${inStock?'cnc-in':'cnc-out'}">
          ${inStock ? 'âœ“ In stock' : 'âœ– Out of stock'}${Number.isFinite(location.available) ? ` (${location.available})` : ''}
        </div>
      </div>
      <div class="cnc-right">
        <button class="cnc-caret-btn" type="button" aria-label="Toggle address" aria-expanded="false">
          <svg class="cnc-caret" viewBox="0 0 24 24" aria-hidden="true"><path d="M7 10l5 5 5-5z" fill="#94a3b8"/></svg>
        </button>
      </div>
    </div>
    <div class="sdev-location-address">${(location.address.formatted||[]).map(escapeHTML).join('<br>')}</div>
  `;

  const radio   = div.querySelector('.cnc-radio');
  const select  = div.querySelector('[data-select]');
  const caret   = div.querySelector('.cnc-caret-btn');

  select.addEventListener('click', async ()=>{
    document.querySelectorAll('.cnc-radio').forEach(r=>r.checked=false);
    radio.checked=true;

    document.querySelectorAll('.location-item').forEach(el=>{
      el.classList.remove('selected','is-open');
      el.querySelector('.cnc-caret-btn')?.setAttribute('aria-expanded','false');
    });
    div.classList.add('selected','is-open');
    caret.setAttribute('aria-expanded','true');

    selectedLocation = {
      id: location.id,
      name: location.name,
      available: Number(location.available ?? 0),
      address: location.address,
      raw: location.raw
    };
    persistSelection(selectedLocation);

    await addOrUpdatePickupMeta(selectedLocation);

    setCheckoutEnabled(true);
    showQtyError("");
  });

  caret.addEventListener('click',e=>{
    e.stopPropagation();
    const isOpen=div.classList.toggle('is-open');
    caret.setAttribute('aria-expanded',String(isOpen));
    if(isOpen){
      document.querySelectorAll('.location-item.is-open').forEach(el=>{
        if(el!==div){ el.classList.remove('is-open'); el.querySelector('.cnc-caret-btn')?.setAttribute('aria-expanded','false'); }
      });
    }
  });

  return div;
}
</script>
