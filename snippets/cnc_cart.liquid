<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Click & Collect â€“ One-time Cart Add</title>
<style>
  * { margin:0; padding:0; box-sizing:border-box; }
  body{ font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,sans-serif; background:#f8f9fa; color:#333; line-height:1.6; padding:20px; }

  .delivery-container{ max-width:500px; margin:0 auto; background:#fff; border:1px solid #01AF67; }
  .delivery-header{ padding:20px; border-bottom:1px solid #e1e8ed; }
  .delivery-title{ font-size:16px; font-weight:600; color:#000; margin-bottom:16px; }
  .delivery-methods{ display:flex; gap:12px; margin-bottom:20px; }
  .delivery-method{ cursor:pointer; font-size:15px; font-weight:600; color:#000; display:flex; align-items:center; gap:9px; }
  .delivery-method svg{ width:22px; height:22px; }
  .delivery-method.active svg{ fill:#01AF67; stroke:#01AF67; }
  .delivery-method.active span{ color:#01AF67; }

  .postcode-section{ margin-bottom:20px; }
  .postcode-label{ font-size:16px; margin-bottom:8px; font-weight:400; color:#000; }
  .postcode-input-container{ display:flex; gap:0; }
  .postcode-input{ border-radius:0; border:1px solid #E1E1E1; border-right:none; width:calc(100% - 48px); height:46px; font-size:15px; color:#111; padding:10px 20px; }
  .postcode-input:focus{ outline:none; box-shadow:none; }
  .search-button{ background:#01AF67; color:#fff; border:none; padding:14px 18px; border-radius:0; cursor:pointer; min-width:50px; display:grid; place-items:center; }
  .search-button:hover{ background:#0b9a5c; }

  .location-section{ padding:20px; display:none; }
  .location-section.active{ display:block; }
  .location-selection-label{ margin:0 0 16px; color:#000; }

  .location-item{ background:#fff; border-top:1px solid #e1e8ed; border-bottom:1px solid #e9eef2; padding:12px; cursor:pointer; }
  .location-item + .location-item{ margin-top:6px; }
  .location-item.selected{ border-color:#01AF67; background:#f8fffb; }

  .sdev-location-header{ display:flex; justify-content:space-between; align-items:flex-end; }
  .sdev-location-name{ font-weight:700; font-size:15px; line-height:21px; color:#000; display:flex; align-items:center; gap:8px; }
  .sdev-location-name:before{ border:1px solid #E4E4E4; content:""; width:20px; height:20px; display:inline-block; border-radius:50%; margin-right:8px; }
  .location-item.selected .sdev-location-name:before{ border:6px solid #01AF67; }
  .sdev-location-distance{ margin-left:8px; color:#6b7280; font-weight:600; }

  .addressed_click_cmt{ display:flex; align-items:center; justify-content:space-between; gap:0; }
  .sdev-location-address{ color:#000; padding:12px 0; display:none; line-height:1.4; }
  .location-item.selected .sdev-location-address{ display:block; }

  .sdev-stock-status{ display:flex; align-items:center; gap:8px; font-weight:700; font-size:14px; color:#01AF67; }
  .sdev-stock-status.out-of-stock{ color:#e74c3c; }
  .sdev-stock-indicator{ width:8px; height:8px; border-radius:50%; background:#01AF67; }
  .sdev-stock-status.out-of-stock .sdev-stock-indicator{ background:#e74c3c; }

  .loading{ text-align:center; padding:40px 20px; color:#7f8c8d; }
  .loading.hidden{ display:none; }
  .spinner{ width:40px; height:40px; border:4px solid #ecf0f1; border-top:4px solid #3498db; border-radius:50%; animation:spin 1s linear infinite; margin:0 auto 16px; }
  @keyframes spin{ 0%{transform:rotate(0)} 100%{transform:rotate(360deg)} }
  .error-message{ text-align:center; padding:20px; color:#e74c3c; background:#fdf2f2; border:1px solid #f5c6cb; }
  .no-results{ text-align:center; padding:20px; color:#7f8c8d; }

  .checkout-section{ padding:20px; text-align:center; }
  .checkout-button{ width:100%; background:#111; color:#fff; border:none; padding:14px; font-size:15px; font-weight:600; cursor:pointer; }
  .checkout-button.disabled{ opacity:.6; cursor:not-allowed; }
</style>
</head>
<body>

<div class="delivery-container">
  <div class="delivery-header">
    <h2 class="delivery-title">Delivery method</h2>

    <div class="delivery-methods">
      <div class="delivery-method click-collect active" data-method="collect">
        <span class="icon">
          <svg fill="#000" width="22" height="22" viewBox="0 0 512 512" aria-hidden="true"><path d="M496.395 150.997 261.728 1.664a10.667 10.667 0 0 0-11.456 0L15.605 150.997A10.667 10.667 0 0 0 10.677 160v341.333c0 5.888 4.779 10.667 10.667 10.667h469.333c5.888 0 10.667-4.779 10.645-10.667V160c-.018-3.648-1.895-7.04-4.967-9.003zM309.344 490.667H202.677V416c0-29.397 23.936-53.333 53.333-53.333s53.333 23.936 53.333 53.333zM480.011 490.667H32.011V165.845l224-142.549 224 142.549z"/></svg>
        </span>
        <span>Click & Collect</span>
      </div>

      <div class="delivery-method home-delivery" data-method="delivery">
        <span class="icon">
          <svg fill="#000" width="22" height="22" viewBox="0 0 512 512" aria-hidden="true"><path d="M53.336 0a10.833 10.833 0 0 0-9.899 6.699L.771 113.365A10.666 10.666 0 0 0 10.67 128h10.667v373.333c0 5.888 4.779 10.667 10.667 10.667h448c5.888 0 10.667-4.779 10.667-10.667V128h10.667a10.667 10.667 0 0 0 8.832-4.693 10.67 10.67 0 0 0 .405-9.942L468.568 6.699A10.667 10.667 0 0 0 458.67 0zm245.334 490.667h-85.333V384h85.333zM469.336 490.667H320.003V373.333c0-5.888-4.779-10.667-10.667-10.667H202.67c-5.888 0-10.667 4.779-10.667 10.667v117.333H42.67V128h426.667zM26.414 106.667l34.133-85.333h390.891l34.133 85.333z"/></svg>
        </span>
        <span>Home Delivery</span>
      </div>
    </div>

    <!-- Postcode Input -->
    <div class="postcode-section" id="postcode-section">
      <div class="postcode-label" id="postcode-label">Search for a location to pick up your order:</div>
      <div class="postcode-input-container">
        <input type="text" class="postcode-input" placeholder="Enter Postcode" maxlength="6" id="postcode-input" value="400001">
        <button class="search-button" id="search-button" aria-label="Search">
          <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"></path></svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Results -->
  <div>
    <div class="location-section" id="location-section">
      <div id="loading" class="loading hidden">
        <div class="spinner"></div>
        <p>Loading stock information...</p>
      </div>

      <div class="location-selection-label">Please choose a pickup location:</div>
      <div id="locations-list"></div>
    </div>

    <div class="checkout-section">
      <button class="checkout-button" id="checkout">Check out</button>
    </div>
  </div>
</div>

<script>
/* =================== CONFIG =================== */
const PICKUP_API          = "http://localhost:3000/api/pickup"; // your pickup API
const VARIANT_ID          = "46578436571392";                    // used in pickup API payload
const PICKUP_META_VARIANT = "46950237503744";                    // dummy variant to carry pickup info

/* =================== DOM =================== */
const deliveryMethods  = document.querySelectorAll('.delivery-method');
const postcodeLabel    = document.getElementById('postcode-label');
const postcodeInput    = document.getElementById('postcode-input');
const searchButton     = document.getElementById('search-button');
const locationSection  = document.getElementById('location-section');
const loading          = document.getElementById('loading');
const locationsList    = document.getElementById('locations-list');
const checkoutButton   = document.getElementById('checkout');

/* =================== STATE =================== */
let selectedMethod     = 'collect';
let selectedLocation   = null;     // stores full selected location object
let hasSearched        = false;
let customerCoords     = null;

/* =================== HELPERS =================== */
function escapeHTML(s){ return String(s||'').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m])); }
function formatAddress(addr){
  const line1 = [addr?.address1, addr?.address2].filter(Boolean).join(', ');
  const line2 = [addr?.city, addr?.province].filter(Boolean).join(', ');
  const line3 = [addr?.country, addr?.zip].filter(Boolean).join(' - ');
  return [line1, line2, line3].filter(Boolean);
}
function calculateDistance(lat1, lon1, lat2, lon2) {
  if ([lat1, lon1, lat2, lon2].some(v => v == null)) return null;
  const R = 6371;
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2)**2 +
            Math.cos(lat1*Math.PI/180) * Math.cos(lat2*Math.PI/180) *
            Math.sin(dLon/2)**2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return +(R*c).toFixed(2);
}
async function getCustomerLocation() {
  return new Promise((resolve) => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        pos => resolve({ latitude: pos.coords.latitude, longitude: pos.coords.longitude }),
        ()  => resolve({ latitude: 30.7333, longitude: 76.7794 }) // fallback
      );
    } else {
      resolve({ latitude: 30.7333, longitude: 76.7794 });
    }
  });
}

/* =================== INIT =================== */
document.addEventListener('DOMContentLoaded', async () => {
  customerCoords = await getCustomerLocation();
  bindUI();
});

/* =================== UI & EVENTS =================== */
function bindUI(){
  deliveryMethods.forEach(method => {
    method.addEventListener('click', () => {
      deliveryMethods.forEach(m => m.classList.remove('active'));
      method.classList.add('active');
      selectedMethod = method.dataset.method;
      hasSearched = false;
      selectedLocation = null;
      locationsList.innerHTML = '';
      locationSection.classList.remove('active');
    });
  });

  searchButton.addEventListener('click', onSearch);
  postcodeInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') onSearch(); });

  // checkout button disabled until a location is selected
  setCheckoutEnabled(false);
}

function setCheckoutEnabled(on){
  checkoutButton.classList.toggle('disabled', !on);
  checkoutButton.disabled = !on;
}

async function onSearch(){
  const postcode = postcodeInput.value.trim();
  if (!postcode) { alert('Please enter a postcode'); return; }

  if (selectedMethod !== 'collect') {
    alert('Switch to Click & Collect to search pickup locations.');
    return;
  }

  hasSearched = true;
  locationSection.classList.add('active');
  await loadPickup(postcode);
}

/* =================== API =================== */
async function loadPickup(postcode){
  showLoading(true);
  try{
    const res = await fetch(PICKUP_API, {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ pincode: postcode, variantId: VARIANT_ID, radiusKm: 100 })
    });
    if(!res.ok) throw new Error('Pickup API error');
    const data = await res.json();

    const merged = [...(data.inRadius || []), ...(data.outOfRadius || [])].map(loc => {
      const formatted = formatAddress(loc.address);
      const dist = typeof loc.distanceKm === 'number'
        ? loc.distanceKm
        : calculateDistance(
            customerCoords?.latitude, customerCoords?.longitude,
            loc.coordinates?.lat, loc.coordinates?.lng
          );
      return {
        id: loc.locationId,
        name: loc.name,
        address: { formatted },
        distance: dist,
        status: String(loc.status || '').toLowerCase(), // 'instock' or something else
        raw: loc
      };
    });

    renderLocations(merged);
  }catch(err){
    console.error(err);
    locationsList.innerHTML = `<div class="error-message">Failed to load stock information. Please try again.</div>`;
  }finally{
    showLoading(false);
  }
}

/* =================== RENDER =================== */
function renderLocations(list){
  locationsList.innerHTML = '';
  if(!list.length){
    locationsList.innerHTML = `<div class="no-results">No locations found for the entered postcode.</div>`;
    return;
  }

  // Sort by distance if available
  list.sort((a,b)=>{
    if (a.distance == null && b.distance == null) return 0;
    if (a.distance == null) return 1;
    if (b.distance == null) return -1;
    return a.distance - b.distance;
  });

  list.forEach(loc => locationsList.appendChild(locationRow(loc)));
  // do NOT auto-select; user must click to trigger add/update
}

function locationRow(location){
  const div = document.createElement('div');
  const inStock = /instock|in_stock/i.test(location.status);
  const distanceStr = location.distance != null ? `${location.distance} km` : '';

  div.className = `location-item${inStock ? '' : ''}`; // keep class simple; out-of-stock styling on status pill
  div.dataset.locationId = location.id;

  div.innerHTML = `
    <div class="sdev-location-header">
      <div class="sdev-location-name">
        <div class="sdev-location-selector"></div>
        ${escapeHTML(location.name)}
        <span class="sdev-location-distance">${escapeHTML(distanceStr)}</span>
      </div>
      <div class="sdev-stock-status ${inStock ? '' : 'out-of-stock'}">
        <div class="sdev-stock-indicator"></div>
        ${inStock ? 'In stock' : 'Out of stock'}
      </div>
    </div>
    <div class="addressed_click_cmt">
      <div class="sdev-location-address">${location.address.formatted.map(escapeHTML).join('<br>')}</div>
    </div>
  `;

  div.addEventListener('click', async () => {
    // select visual
    document.querySelectorAll('.location-item').forEach(el => el.classList.remove('selected'));
    div.classList.add('selected');
    selectedLocation = location;

    // enable checkout only if in stock
    setCheckoutEnabled(inStock);

    // add/update the meta line once
    await addOrUpdatePickupMeta(location);
  });

  return div;
}

/* =================== ONE-TIME ADD / UPDATE CART =================== */
let addingPickupMeta = false; // in-flight guard

async function addOrUpdatePickupMeta(location) {
  if (addingPickupMeta) return; // prevent double-taps
  addingPickupMeta = true;
  try {
    const cart = await fetch('/cart.js', { credentials:'same-origin' }).then(r => r.json());

    // find existing meta line for pickup
    let existing = null;
    (cart.items || []).forEach(item => {
      if (String(item.variant_id) === PICKUP_META_VARIANT) existing = item;
    });

    const props = {
      'Pickup Location': location.name,
      'Location ID': location.id || location.raw?.locationId || '',
      'Address': (location.address?.formatted || []).join(', '),
      '__pickup_meta': 'true'
    };

    if (!existing) {
      // add once
      await fetch('/cart/add.js', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        credentials:'same-origin',
        body: JSON.stringify({ id: PICKUP_META_VARIANT, quantity: 1, properties: props })
      }).then(r=>r.json());
      console.log('[pickup] meta line ADDED');
    } else {
      // update only (no duplicates)
      await fetch('/cart/change.js', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        credentials:'same-origin',
        body: JSON.stringify({ id: existing.key, quantity: 1, properties: props })
      }).then(r=>r.json());
      console.log('[pickup] meta line UPDATED');
    }
  } catch (err) {
    console.error('[pickup] add/update error', err);
  } finally {
    addingPickupMeta = false;
  }
}

/* =================== UTIL =================== */
function showLoading(on){ loading.classList.toggle('hidden', !on); }

/* (Optional) If you want to remove the pickup meta when user switches to Home Delivery, add:
async function removePickupMeta() {
  try{
    const cart = await fetch('/cart.js').then(r=>r.json());
    const updates = {};
    (cart.items||[]).forEach(i => { if (String(i.variant_id) === PICKUP_META_VARIANT) updates[i.key] = 0; });
    if(Object.keys(updates).length){
      await fetch('/cart/update.js',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({updates})});
    }
  }catch(e){ console.error('remove meta error', e); }
}
*/
</script>
</body>
</html>
