<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Click & Collect – add once + cleanup</title>
<style>
    .cart__ctas {
    display: none;
    }
  *{margin:0;padding:0;box-sizing:border-box}
  body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,sans-serif;background:#f8f9fa;color:#111;line-height:1.6;padding:20px}

  .delivery-container{max-width:520px;margin:0 auto;background:#fff;border:1px solid #01AF67;border-radius:6px;overflow:hidden}
  .delivery-header{padding:20px;border-bottom:1px solid #e1e8ed}
  .delivery-title{font-size:16px;font-weight:700;margin-bottom:16px}

  .delivery-methods{display:flex;gap:8px;margin-bottom:20px}
  .delivery-method{display:flex;align-items:center;gap:8px;font-weight:700;cursor:pointer;color:#0f172a}
  .delivery-method svg{width:22px;height:22px}
  .delivery-method.active span,.delivery-method.active svg{color:#01AF67;fill:#01AF67}

  .postcode-section{margin-bottom:8px}
  .postcode-label{font-size:15px;margin-bottom:8px}
  .postcode-input-container{display:flex}
  .postcode-input{flex:1;height:46px;border:1px solid #E1E1E1;border-right:none;padding:0 14px;font-size:15px}
  .search-button{min-width:50px;border:none;background:#01AF67;color:#fff;display:grid;place-items:center;padding:0 14px;cursor:pointer}
  .search-button:hover{background:#0b9a5c}

  .location-section{padding:14px 20px 8px 20px;display:none;border-top:1px solid #e1e8ed}
  .location-section.active{display:block}
  .location-selection-label{font-weight:600;margin:6px 0 14px 0;color:#111}

  .location-item{padding:12px 0;border-bottom:1px solid #e9eef2}
  .location-item.selected{background:#f7fffb;border-top:1px solid #01AF67;border-bottom:1px solid #01AF67}

  .cnc-row{display:flex;align-items:center;gap:10px}
  .cnc-left{display:flex;align-items:center;gap:10px;min-width:0;flex:1}
  .cnc-right{display:flex;align-items:center;gap:10px}

  .cnc-radio{appearance:none;-webkit-appearance:none;inline-size:18px;block-size:18px;border:2px solid #cbd5e1;border-radius:999px;display:inline-grid;place-items:center;cursor:pointer;flex:0 0 auto}
  .cnc-radio:checked{border-color:#01AF67}
  .cnc-radio:checked::after{content:"";inline-size:10px;block-size:10px;background:#01AF67;border-radius:999px}

  .cnc-name{font-weight:700;color:#111;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
  .cnc-distance{margin-left:6px;color:#6b7280;font-size:13px;white-space:nowrap}
  .cnc-badge{margin-left:8px;font-size:13px;font-weight:700;white-space:nowrap}
  .cnc-badge.cnc-in{color:#01AF67}
  .cnc-badge.cnc-out{color:#e74c3c}

  .cnc-caret-btn{border:0;background:transparent;cursor:pointer;width:24px;height:24px;display:inline-grid;place-items:center}
  .cnc-caret{width:14px;height:14px;transition:transform .18s ease}
  .location-item.is-open .cnc-caret{transform:rotate(180deg)}

  .sdev-location-address{color:#111;padding:8px 28px 6px 28px;line-height:1.45;overflow:hidden;max-height:0;transition:max-height .22s ease}
  .location-item.is-open .sdev-location-address{max-height:220px}

  .loading{text-align:center;padding:28px 0;color:#6b7280}
  .loading.hidden{display:none}
  .spinner{width:36px;height:36px;border:4px solid #ecf0f1;border-top:4px solid #3498db;border-radius:50%;animation:spin 1s linear infinite;margin:0 auto 12px}
  @keyframes spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}

  .no-results,.error-message{text-align:center;color:#6b7280;padding:16px 0}
  .error-message{color:#e74c3c}

  .checkout-section{padding:16px 20px;border-top:1px solid #e1e8ed}
  .checkout-button{width:100%;background:#111;color:#fff;border:none;padding:14px;font-weight:700;cursor:pointer;border-radius:4px}
  .checkout-button.disabled{opacity:.6;cursor:not-allowed}
</style>
</head>
<body>

<div class="delivery-container">
  <div class="delivery-header">
    <h2 class="delivery-title">Delivery method</h2>

    <div class="delivery-methods">
      <div class="delivery-method click-collect active" data-method="collect">
        <svg viewBox="0 0 512 512"><path d="M496.395 150.997 261.728 1.664a10.667 10.667 0 0 0-11.456 0L15.605 150.997A10.667 10.667 0 0 0 10.677 160v341.333c0 5.888 4.779 10.667 10.667 10.667h469.333c5.888 0 10.667-4.779 10.645-10.667V160c-.018-3.648-1.895-7.04-4.967-9.003zM309.344 490.667H202.677V416c0-29.397 23.936-53.333 53.333-53.333s53.333 23.936 53.333 53.333zM480.011 490.667H32.011V165.845l224-142.549 224 142.549z"/></svg>
        <span>Click & Collect</span>
      </div>
      <div class="delivery-method home-delivery" data-method="delivery">
        <svg viewBox="0 0 512 512"><path d="M53.336 0a10.833 10.833 0 0 0-9.899 6.699L.771 113.365A10.666 10.666 0 0 0 10.67 128h10.667v373.333c0 5.888 4.779 10.667 10.667 10.667h448c5.888 0 10.667-4.779 10.667-10.667V128h10.667a10.667 10.667 0 0 0 8.832-4.693 10.67 10.67 0 0 0 .405-9.942L468.568 6.699A10.667 10.667 0 0 0 458.67 0zm245.334 490.667h-85.333V384h85.333zM469.336 490.667H320.003V373.333c0-5.888-4.779-10.667-10.667-10.667H202.67c-5.888 0-10.667 4.779-10.667 10.667v117.333H42.67V128h426.667zM26.414 106.667l34.133-85.333h390.891l34.133 85.333z"/></svg>
        <span>Home Delivery</span>
      </div>
    </div>

    <div class="postcode-section">
      <div class="postcode-label" id="postcode-label">Search for a location to pick up your order:</div>
      <div class="postcode-input-container">
        <input id="postcode-input" class="postcode-input" type="text" placeholder="Enter Postcode" maxlength="10" value="400001"/>
        <button id="search-button" class="search-button" aria-label="Search">
          <svg viewBox="0 0 512 512" width="18" height="18"><path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"/></svg>
        </button>
      </div>
    </div>
  </div>

  <div class="location-section" id="location-section">
    <div id="loading" class="loading hidden">
      <div class="spinner"></div>
      <p>Loading stock information…</p>
    </div>
    <div class="location-selection-label">Please choose a pickup location:</div>
    <div id="locations-list"></div>
  </div>

  <div class="checkout-section">
    <button id="checkout" class="checkout-button disabled" disabled>Check out</button>
  </div>
</div>

<script>
/* ======== CONFIG ======== */
const PICKUP_API          = "https://6d63ab86a3e8.ngrok-free.app/api/pickup";
const VARIANT_ID          = "46578436571392";
const PICKUP_META_VARIANT = "46950237503744";

/* ======== STORAGE KEYS (NEW) ======== */
const SAVED_LOC_KEY = 'pickup.selectedLocation';
const SAVED_PC_KEY  = 'pickup.lastPostcode';

/* ======== DOM ======== */
const deliveryMethods = document.querySelectorAll('.delivery-method');
const postcodeInput   = document.getElementById('postcode-input');
const searchButton    = document.getElementById('search-button');
const locationSection = document.getElementById('location-section');
const locationsList   = document.getElementById('locations-list');
const loading         = document.getElementById('loading');
const checkoutButton  = document.getElementById('checkout');

/* ======== STATE ======== */
let selectedMethod   = 'collect';
let selectedLocation = null;
let customerCoords   = null;
let lastResults      = []; // NEW: keep current list to reselect saved

/* ======== UTILS ======== */
const escapeHTML = s => String(s||'').replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));
function formatAddress(a){
  const line1=[a?.address1,a?.address2].filter(Boolean).join(', ');
  const line2=[a?.city,a?.province].filter(Boolean).join(', ');
  const line3=[a?.country,a?.zip].filter(Boolean).join(' - ');
  return [line1,line2,line3].filter(Boolean);
}
function calculateDistance(lat1, lon1, lat2, lon2){
  if ([lat1, lon1, lat2, lon2].some(v=>v==null)) return null;
  const R=6371, dLat=(lat2-lat1)*Math.PI/180, dLon=(lon2-lon1)*Math.PI/180;
  const a=Math.sin(dLat/2)**2+Math.cos(lat1*Math.PI/180)*Math.cos(lat2*Math.PI/180)*Math.sin(dLon/2)**2;
  return +(2*R*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))).toFixed(2);
}
function setCheckoutEnabled(on){ checkoutButton.classList.toggle('disabled',!on); checkoutButton.disabled=!on; }
function showLoading(on){ loading.classList.toggle('hidden',!on); }

/* ======== STORAGE HELPERS (NEW) ======== */
function persistSelection(location){
  try{
    const payload = {
      id: location.id || location.raw?.locationId || null,
      name: location.name,
      distance: location.distance,
      status: location.status,
      address: location.address,
      raw: location.raw ?? null
    };
    localStorage.setItem(SAVED_LOC_KEY, JSON.stringify(payload));
  }catch(e){ console.warn('persistSelection failed', e); }
}
function readSavedSelection(){
  try{ return JSON.parse(localStorage.getItem(SAVED_LOC_KEY) || 'null'); }
  catch{ return null; }
}
function persistPostcode(pc){
  try{ localStorage.setItem(SAVED_PC_KEY, String(pc||'')); }catch{}
}
function readSavedPostcode(){
  try{ return localStorage.getItem(SAVED_PC_KEY) || ''; }catch{ return ''; }
}
function deriveZipFromSaved(sel){
  if (!sel) return '';
  const z = sel.raw?.address?.zip || sel.address?.zip || '';
  if (z) return String(z);
  const flat = Array.isArray(sel.address?.formatted) ? sel.address.formatted.join(' ') : '';
  const m = String(flat).match(/\b\d{4,6}\b/);
  return m ? m[0] : '';
}

/* ======== CART HELPERS (Shopify) ======== */
async function removePickupMeta(){
  try{
    const cart=await fetch('/cart.js',{credentials:'same-origin'}).then(r=>r.json());
    const updates={};
    (cart.items||[]).forEach(i=>{ if(String(i.variant_id)===PICKUP_META_VARIANT) updates[i.key]=0; });
    if(Object.keys(updates).length){
      await fetch('/cart/update.js',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',body:JSON.stringify({updates})});
      console.log('[pickup] REMOVED');
    }
  }catch(e){ console.error('[pickup] remove error',e); }
}

let addingPickupMeta=false;
async function addOrUpdatePickupMeta(location){
  if(addingPickupMeta) return;
  addingPickupMeta=true;
  try{
    const cart=await fetch('/cart.js',{credentials:'same-origin'}).then(r=>r.json());
    let existing=null;
    (cart.items||[]).forEach(i=>{ if(String(i.variant_id)===PICKUP_META_VARIANT) existing=i; });

    const props={
      'Pickup Location':location.name,
      'Location ID':location.id||location.raw?.locationId||'',
      'Address':(location.address?.formatted||[]).join(', '),
      '__pickup_meta':'true'
    };

    if(!existing){
      await fetch('/cart/add.js',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',body:JSON.stringify({id:PICKUP_META_VARIANT,quantity:1,properties:props})}).then(r=>r.json());
      console.log('[pickup] ADDED');
    }else{
      await fetch('/cart/change.js',{method:'POST',headers:{'Content-Type':'application/json'},credentials:'same-origin',body:JSON.stringify({id:existing.key,quantity:1,properties:props})}).then(r=>r.json());
      console.log('[pickup] UPDATED');
    }
  }catch(e){ console.error('[pickup] add/update error',e); }
  finally{ addingPickupMeta=false; }
}

/* ======== GEO ======== */
function getCustomerLocation(){
  return new Promise(resolve=>{
    if(navigator.geolocation){
      navigator.geolocation.getCurrentPosition(
        pos=>resolve({latitude:pos.coords.latitude,longitude:pos.coords.longitude}),
        ()=>resolve({latitude:30.7333,longitude:76.7794})
      );
    }else resolve({latitude:30.7333,longitude:76.7794});
  });
}

/* ======== INIT & LIFECYCLE CLEANUP ======== */
document.addEventListener('DOMContentLoaded', async ()=>{
  // Always clean any stale C&C meta when loading the cart page
  await removePickupMeta();

  customerCoords=await getCustomerLocation();

  // Prefill postcode from storage or fallback to input's existing value (NEW)
  const savedSel = readSavedSelection();
  const savedPC  = readSavedPostcode() || deriveZipFromSaved(savedSel) || postcodeInput.value || '';
  if (savedPC) postcodeInput.value = savedPC;

  deliveryMethods.forEach(m=>{
    m.addEventListener('click', async ()=>{
      deliveryMethods.forEach(x=>x.classList.remove('active'));
      m.classList.add('active');
      selectedMethod=m.dataset.method;

      if(selectedMethod==='delivery'){
        setTimeout(()=>{document.querySelector('button#checkout').classList.remove('disabled');},1000);
        await removePickupMeta();
        selectedLocation=null;
        setCheckoutEnabled(false);
        document.querySelectorAll('.location-item').forEach(el=>{
          el.classList.remove('selected','is-open');
          const r=el.querySelector('.cnc-radio'); if(r) r.checked=false;
        });
        locationSection.classList.remove('active');
      }else{
        locationSection.classList.add('active');
      }
    });
  });

  searchButton.addEventListener('click', onSearch);
  postcodeInput.addEventListener('keydown', e=>{ if(e.key==='Enter') onSearch(); });

  // Checkout
  checkoutButton.addEventListener('click', ()=>{ window.location.href='/checkout'; });

  locationSection.classList.add('active');

  // Auto-search if we have a saved postcode (NEW)
  if (savedPC) {
    await loadPickup(savedPC, savedSel?.id || savedSel?.raw?.locationId || null);
  }
});

// Clean meta again on return/visibility
window.addEventListener('pageshow', async ()=>{ await removePickupMeta(); });
document.addEventListener('visibilitychange', async ()=>{ if(document.visibilityState==='visible'){ await removePickupMeta(); }});

/* ======== SEARCH / RENDER ======== */
async function onSearch(){
  const postcode=postcodeInput.value.trim();
  if(!postcode){ alert('Please enter a postcode'); return; }
  if(selectedMethod!=='collect'){ alert('Switch to Click & Collect to search pickup locations.'); return; }
  persistPostcode(postcode); // NEW: remember postcode
  await loadPickup(postcode, (readSavedSelection()?.id || readSavedSelection()?.raw?.locationId || null));
}

async function loadPickup(pincode, preferredId=null){
  showLoading(true);
  setCheckoutEnabled(false);
  selectedLocation=null;
  locationsList.innerHTML='';
  try{
    const res=await fetch(PICKUP_API,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({pincode,variantId:VARIANT_ID,radiusKm:100})});
    if(!res.ok) throw new Error('Pickup API error');
    const data=await res.json();
    const list=[...(data.inRadius||[]),...(data.outOfRadius||[])].map(loc=>{
      const formatted=formatAddress(loc.address);
      const dist=typeof loc.distanceKm==='number'?loc.distanceKm:calculateDistance(customerCoords?.latitude,customerCoords?.longitude,loc.coordinates?.lat,loc.coordinates?.lng);
      return{ id:loc.locationId||loc.id, name:loc.name, distance:dist, status:String(loc.status||'').toLowerCase(), address:{formatted}, raw:loc };
    });
    lastResults = list; // NEW
    renderLocations(list, preferredId);
  }catch(err){
    console.error(err);
    locationsList.innerHTML=`<div class="error-message">Failed to load stock information. Please try again.</div>`;
  }finally{ showLoading(false); }
}

function renderLocations(list, preferredId=null){
  locationsList.innerHTML='';
  if(!list.length){ locationsList.innerHTML='<div class="no-results">No locations found for the entered postcode.</div>'; return; }
  list.sort((a,b)=> (a.distance??1e9)-(b.distance??1e9));
  list.forEach(loc=>locationsList.appendChild(locationRow(loc)));

  // Auto-select saved/preferred location if present (NEW)
  if (preferredId){
    const match = locationsList.querySelector(`.location-item[data-location-id="${CSS.escape(preferredId)}"]`);
    if (match){
      const select = match.querySelector('[data-select]');
      if (select) select.click(); // triggers meta + storage + UI
      return;
    }
  }
  // Otherwise select the first one by default (optional)
  const first = locationsList.querySelector('.location-item');
  if (first){
    const select = first.querySelector('[data-select]');
    if (select) select.click();
  }
}

function locationRow(location){
  const div=document.createElement('div');
  const inStock=/instock|in_stock/i.test(location.status);
  const distanceStr=location.distance!=null?`${location.distance} km`:''; // keep raw, already toFixed in API block if needed

  div.className='location-item';
  div.dataset.locationId=location.id;

  div.innerHTML=`
    <div class="cnc-row">
      <div class="cnc-left" data-select>
        <input class="cnc-radio" type="radio" name="pickup-radio" aria-label="Select ${escapeHTML(location.name)}" />
        <div class="cnc-name">${escapeHTML(location.name)}</div>
        <div class="cnc-distance">${escapeHTML(distanceStr)}</div>
        <div class="cnc-badge ${inStock?'cnc-in':'cnc-out'}">${inStock?'✓ In stock':'✖ Out of stock'}</div>
      </div>
      <div class="cnc-right">
        <button class="cnc-caret-btn" type="button" aria-label="Toggle address" aria-expanded="false">
          <svg class="cnc-caret" viewBox="0 0 24 24" aria-hidden="true"><path d="M7 10l5 5 5-5z" fill="#94a3b8"/></svg>
        </button>
      </div>
    </div>
    <div class="sdev-location-address">${(location.address.formatted||[]).map(escapeHTML).join('<br>')}</div>
  `;

  const radio   = div.querySelector('.cnc-radio');
  const select  = div.querySelector('[data-select]');
  const caret   = div.querySelector('.cnc-caret-btn');

  // Select = choose location + open + add/update meta + SAVE TO STORAGE (NEW)
  select.addEventListener('click', async ()=>{
    document.querySelectorAll('.cnc-radio').forEach(r=>r.checked=false);
    radio.checked=true;

    document.querySelectorAll('.location-item').forEach(el=>{
      el.classList.remove('selected','is-open');
      el.querySelector('.cnc-caret-btn')?.setAttribute('aria-expanded','false');
    });
    div.classList.add('selected','is-open');
    caret.setAttribute('aria-expanded','true');

    selectedLocation=location;
    setCheckoutEnabled(inStock);

    // persist chosen location (NEW)
    persistSelection(location);

    await addOrUpdatePickupMeta(location);
  });

  // Caret toggles only the dropdown
  caret.addEventListener('click',e=>{
    e.stopPropagation();
    const isOpen=div.classList.toggle('is-open');
    caret.setAttribute('aria-expanded',String(isOpen));
    if(isOpen){
      document.querySelectorAll('.location-item.is-open').forEach(el=>{
        if(el!==div){ el.classList.remove('is-open'); el.querySelector('.cnc-caret-btn')?.setAttribute('aria-expanded','false'); }
      });
    }
  });

  return div;
}
</script>

</body>
</html>
